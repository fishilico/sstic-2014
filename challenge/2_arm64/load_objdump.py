#!/usr/bin/env python3
"""Load instructions from an "objdump -d" file"""

import binascii
import os.path
import re

# Line generated by "objdump -d"
ASM_RE = re.compile(
    r'^\s*(?P<addr>[0-9a-f]+):\s*(?P<hex>[0-9a-f]+)\s*(?P<asm>[^;]+)(;.*)?$',
    re.I)


def load_objdump_d(filename):
    """Load instructions from an "objdump -d" file

    Returns instructions, base_addr where:
    * instructions is a list of (mnemonic, params_list) tuples, where:
        * mnemonic is a string
        * params_list is None or a list of strings (the parameters/operands)
    * base_addr is the address of the first instruction in the file
    """
    prev_addr = None
    instructions = []
    base_addr = None
    with open(filename, 'r') as fd:
        for line in fd:
            matches = ASM_RE.match(line)
            if matches is None:
                continue
            addr = int(matches.group('addr'), 16)
            if prev_addr is None:
                base_addr = addr
            elif prev_addr + 4 != addr:
                raise Exception("Invalid addr {}, expected {}".format(
                    addr, prev_addr + 4))
            prev_addr = addr

            asm = matches.group('asm')
            # Strip comments with //
            # (comments with ; are stripped in the regexp)
            asm = asm.split('//', 1)[0].strip()
            # Split into mnemonic + parameters
            mne_params = asm.split(None, 1)
            mne = mne_params[0]
            params = None
            if len(mne_params) == 2:
                params = mne_params[1].split(', ')
            instructions.append((mne, params))
    return instructions, base_addr
